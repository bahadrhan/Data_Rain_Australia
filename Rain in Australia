{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1733506,"sourceType":"datasetVersion","datasetId":6012}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Building a Rainfall Prediction Classifier\n\nThe project is for learning purposes for IBM Generative AI Engineering in Coursera\n\nObjectives\n\nExploring and performing on a real-world data set\nBuilding a classifier pipeline and optimize it using grid search cross validation\nEvaluating your model by interpreting various performance metrics and visualizations\nImplementing a different classifier by updating your pipeline\nUsing an appropriate set of parameters to search over in each case","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:26.131972Z","iopub.execute_input":"2025-05-10T21:48:26.132310Z","iopub.status.idle":"2025-05-10T21:48:26.140474Z","shell.execute_reply.started":"2025-05-10T21:48:26.132288Z","shell.execute_reply":"2025-05-10T21:48:26.139634Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/weather-dataset-rattle-package/weatherAUS.csv\n","output_type":"stream"}],"execution_count":100},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/weather-dataset-rattle-package/weatherAUS.csv\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:28.451604Z","iopub.execute_input":"2025-05-10T21:48:28.451903Z","iopub.status.idle":"2025-05-10T21:48:28.814766Z","shell.execute_reply.started":"2025-05-10T21:48:28.451882Z","shell.execute_reply":"2025-05-10T21:48:28.813852Z"}},"outputs":[{"execution_count":101,"output_type":"execute_result","data":{"text/plain":"         Date Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n0  2008-12-01   Albury     13.4     22.9       0.6          NaN       NaN   \n1  2008-12-02   Albury      7.4     25.1       0.0          NaN       NaN   \n2  2008-12-03   Albury     12.9     25.7       0.0          NaN       NaN   \n3  2008-12-04   Albury      9.2     28.0       0.0          NaN       NaN   \n4  2008-12-05   Albury     17.5     32.3       1.0          NaN       NaN   \n\n  WindGustDir  WindGustSpeed WindDir9am  ... Humidity9am  Humidity3pm  \\\n0           W           44.0          W  ...        71.0         22.0   \n1         WNW           44.0        NNW  ...        44.0         25.0   \n2         WSW           46.0          W  ...        38.0         30.0   \n3          NE           24.0         SE  ...        45.0         16.0   \n4           W           41.0        ENE  ...        82.0         33.0   \n\n   Pressure9am  Pressure3pm  Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday  \\\n0       1007.7       1007.1       8.0       NaN     16.9     21.8         No   \n1       1010.6       1007.8       NaN       NaN     17.2     24.3         No   \n2       1007.6       1008.7       NaN       2.0     21.0     23.2         No   \n3       1017.6       1012.8       NaN       NaN     18.1     26.5         No   \n4       1010.8       1006.0       7.0       8.0     17.8     29.7         No   \n\n   RainTomorrow  \n0            No  \n1            No  \n2            No  \n3            No  \n4            No  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>MinTemp</th>\n      <th>MaxTemp</th>\n      <th>Rainfall</th>\n      <th>Evaporation</th>\n      <th>Sunshine</th>\n      <th>WindGustDir</th>\n      <th>WindGustSpeed</th>\n      <th>WindDir9am</th>\n      <th>...</th>\n      <th>Humidity9am</th>\n      <th>Humidity3pm</th>\n      <th>Pressure9am</th>\n      <th>Pressure3pm</th>\n      <th>Cloud9am</th>\n      <th>Cloud3pm</th>\n      <th>Temp9am</th>\n      <th>Temp3pm</th>\n      <th>RainToday</th>\n      <th>RainTomorrow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008-12-01</td>\n      <td>Albury</td>\n      <td>13.4</td>\n      <td>22.9</td>\n      <td>0.6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>W</td>\n      <td>44.0</td>\n      <td>W</td>\n      <td>...</td>\n      <td>71.0</td>\n      <td>22.0</td>\n      <td>1007.7</td>\n      <td>1007.1</td>\n      <td>8.0</td>\n      <td>NaN</td>\n      <td>16.9</td>\n      <td>21.8</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008-12-02</td>\n      <td>Albury</td>\n      <td>7.4</td>\n      <td>25.1</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WNW</td>\n      <td>44.0</td>\n      <td>NNW</td>\n      <td>...</td>\n      <td>44.0</td>\n      <td>25.0</td>\n      <td>1010.6</td>\n      <td>1007.8</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>17.2</td>\n      <td>24.3</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2008-12-03</td>\n      <td>Albury</td>\n      <td>12.9</td>\n      <td>25.7</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WSW</td>\n      <td>46.0</td>\n      <td>W</td>\n      <td>...</td>\n      <td>38.0</td>\n      <td>30.0</td>\n      <td>1007.6</td>\n      <td>1008.7</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>21.0</td>\n      <td>23.2</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2008-12-04</td>\n      <td>Albury</td>\n      <td>9.2</td>\n      <td>28.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NE</td>\n      <td>24.0</td>\n      <td>SE</td>\n      <td>...</td>\n      <td>45.0</td>\n      <td>16.0</td>\n      <td>1017.6</td>\n      <td>1012.8</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.1</td>\n      <td>26.5</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2008-12-05</td>\n      <td>Albury</td>\n      <td>17.5</td>\n      <td>32.3</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>W</td>\n      <td>41.0</td>\n      <td>ENE</td>\n      <td>...</td>\n      <td>82.0</td>\n      <td>33.0</td>\n      <td>1010.8</td>\n      <td>1006.0</td>\n      <td>7.0</td>\n      <td>8.0</td>\n      <td>17.8</td>\n      <td>29.7</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 23 columns</p>\n</div>"},"metadata":{}}],"execution_count":101},{"cell_type":"code","source":"df.count()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:30.459872Z","iopub.execute_input":"2025-05-10T21:48:30.460212Z","iopub.status.idle":"2025-05-10T21:48:30.528513Z","shell.execute_reply.started":"2025-05-10T21:48:30.460188Z","shell.execute_reply":"2025-05-10T21:48:30.527617Z"}},"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"Date             145460\nLocation         145460\nMinTemp          143975\nMaxTemp          144199\nRainfall         142199\nEvaporation       82670\nSunshine          75625\nWindGustDir      135134\nWindGustSpeed    135197\nWindDir9am       134894\nWindDir3pm       141232\nWindSpeed9am     143693\nWindSpeed3pm     142398\nHumidity9am      142806\nHumidity3pm      140953\nPressure9am      130395\nPressure3pm      130432\nCloud9am          89572\nCloud3pm          86102\nTemp9am          143693\nTemp3pm          141851\nRainToday        142199\nRainTomorrow     142193\ndtype: int64"},"metadata":{}}],"execution_count":102},{"cell_type":"markdown","source":"Cleaning the data for simplification ","metadata":{}},{"cell_type":"code","source":"df = df.dropna()\ndf.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:32.310257Z","iopub.execute_input":"2025-05-10T21:48:32.310564Z","iopub.status.idle":"2025-05-10T21:48:32.405488Z","shell.execute_reply.started":"2025-05-10T21:48:32.310540Z","shell.execute_reply":"2025-05-10T21:48:32.404619Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 56420 entries, 6049 to 142302\nData columns (total 23 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Date           56420 non-null  object \n 1   Location       56420 non-null  object \n 2   MinTemp        56420 non-null  float64\n 3   MaxTemp        56420 non-null  float64\n 4   Rainfall       56420 non-null  float64\n 5   Evaporation    56420 non-null  float64\n 6   Sunshine       56420 non-null  float64\n 7   WindGustDir    56420 non-null  object \n 8   WindGustSpeed  56420 non-null  float64\n 9   WindDir9am     56420 non-null  object \n 10  WindDir3pm     56420 non-null  object \n 11  WindSpeed9am   56420 non-null  float64\n 12  WindSpeed3pm   56420 non-null  float64\n 13  Humidity9am    56420 non-null  float64\n 14  Humidity3pm    56420 non-null  float64\n 15  Pressure9am    56420 non-null  float64\n 16  Pressure3pm    56420 non-null  float64\n 17  Cloud9am       56420 non-null  float64\n 18  Cloud3pm       56420 non-null  float64\n 19  Temp9am        56420 non-null  float64\n 20  Temp3pm        56420 non-null  float64\n 21  RainToday      56420 non-null  object \n 22  RainTomorrow   56420 non-null  object \ndtypes: float64(16), object(7)\nmemory usage: 10.3+ MB\n","output_type":"stream"}],"execution_count":103},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:34.647437Z","iopub.execute_input":"2025-05-10T21:48:34.647811Z","iopub.status.idle":"2025-05-10T21:48:34.653955Z","shell.execute_reply.started":"2025-05-10T21:48:34.647786Z","shell.execute_reply":"2025-05-10T21:48:34.653114Z"}},"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"Index(['Date', 'Location', 'MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation',\n       'Sunshine', 'WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm',\n       'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm',\n       'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am',\n       'Temp3pm', 'RainToday', 'RainTomorrow'],\n      dtype='object')"},"metadata":{}}],"execution_count":104},{"cell_type":"code","source":"df = df.rename(columns={'RainToday': 'RainYesterday',\n                        'RainTomorrow': 'RainToday'\n                        })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:36.078152Z","iopub.execute_input":"2025-05-10T21:48:36.078537Z","iopub.status.idle":"2025-05-10T21:48:36.087920Z","shell.execute_reply.started":"2025-05-10T21:48:36.078507Z","shell.execute_reply":"2025-05-10T21:48:36.086853Z"}},"outputs":[],"execution_count":105},{"cell_type":"markdown","source":"Location Selection: Grouping the close locations","metadata":{}},{"cell_type":"code","source":"df = df[df.Location.isin(['Melbourne','MelbourneAirport','Watsonia',])]\ndf. info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:37.703523Z","iopub.execute_input":"2025-05-10T21:48:37.704258Z","iopub.status.idle":"2025-05-10T21:48:37.726136Z","shell.execute_reply.started":"2025-05-10T21:48:37.704224Z","shell.execute_reply":"2025-05-10T21:48:37.725111Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 7557 entries, 64191 to 80997\nData columns (total 23 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Date           7557 non-null   object \n 1   Location       7557 non-null   object \n 2   MinTemp        7557 non-null   float64\n 3   MaxTemp        7557 non-null   float64\n 4   Rainfall       7557 non-null   float64\n 5   Evaporation    7557 non-null   float64\n 6   Sunshine       7557 non-null   float64\n 7   WindGustDir    7557 non-null   object \n 8   WindGustSpeed  7557 non-null   float64\n 9   WindDir9am     7557 non-null   object \n 10  WindDir3pm     7557 non-null   object \n 11  WindSpeed9am   7557 non-null   float64\n 12  WindSpeed3pm   7557 non-null   float64\n 13  Humidity9am    7557 non-null   float64\n 14  Humidity3pm    7557 non-null   float64\n 15  Pressure9am    7557 non-null   float64\n 16  Pressure3pm    7557 non-null   float64\n 17  Cloud9am       7557 non-null   float64\n 18  Cloud3pm       7557 non-null   float64\n 19  Temp9am        7557 non-null   float64\n 20  Temp3pm        7557 non-null   float64\n 21  RainYesterday  7557 non-null   object \n 22  RainToday      7557 non-null   object \ndtypes: float64(16), object(7)\nmemory usage: 1.4+ MB\n","output_type":"stream"}],"execution_count":106},{"cell_type":"markdown","source":"We still have 7557 records.","metadata":{}},{"cell_type":"markdown","source":"Grouping the Seasons and switching the date column with season","metadata":{}},{"cell_type":"code","source":"def date_to_season(date):\n    month = date.month\n    if (month == 12) or (month == 1) or (month == 2):\n        return 'Summer'\n    elif (month == 3) or (month == 4) or (month == 5):\n        return 'Autumn'\n    elif (month == 6) or (month == 7) or (month == 8):\n        return 'Winter'\n    elif (month == 9) or (month == 10) or (month == 11):\n        return 'Spring'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:42.136914Z","iopub.execute_input":"2025-05-10T21:48:42.137282Z","iopub.status.idle":"2025-05-10T21:48:42.143292Z","shell.execute_reply.started":"2025-05-10T21:48:42.137255Z","shell.execute_reply":"2025-05-10T21:48:42.142286Z"}},"outputs":[],"execution_count":107},{"cell_type":"code","source":"df['Date'] = pd.to_datetime(df['Date'])\ndf['Season'] = df['Date'].apply(date_to_season)\ndf = df.drop(columns='Date')\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:47.600062Z","iopub.execute_input":"2025-05-10T21:48:47.600368Z","iopub.status.idle":"2025-05-10T21:48:47.647850Z","shell.execute_reply.started":"2025-05-10T21:48:47.600343Z","shell.execute_reply":"2025-05-10T21:48:47.646926Z"}},"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"               Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n64191  MelbourneAirport     11.2     19.9       0.0          5.6       8.8   \n64192  MelbourneAirport      7.8     17.8       1.2          7.2      12.9   \n64193  MelbourneAirport      6.3     21.1       0.0          6.2      10.5   \n64194  MelbourneAirport      8.1     29.2       0.0          6.4      12.5   \n64195  MelbourneAirport      9.7     29.0       0.0          7.4      12.3   \n...                 ...      ...      ...       ...          ...       ...   \n80992          Watsonia      3.6     14.5       0.0          2.4       8.8   \n80994          Watsonia      4.8     13.3       0.4          0.6       0.0   \n80995          Watsonia      5.6     13.1       0.0          1.6       6.0   \n80996          Watsonia      6.9     12.1       3.2          1.8       5.6   \n80997          Watsonia      7.9     13.0       0.0          2.8       3.8   \n\n      WindGustDir  WindGustSpeed WindDir9am WindDir3pm  ...  Humidity3pm  \\\n64191          SW           69.0          W         SW  ...         37.0   \n64192         SSE           56.0         SW        SSE  ...         43.0   \n64193         SSE           31.0          E          S  ...         35.0   \n64194         SSE           35.0         NE        SSE  ...         23.0   \n64195          SE           33.0         SW        SSE  ...         31.0   \n...           ...            ...        ...        ...  ...          ...   \n80992         NNE           41.0        ENE        NNE  ...         66.0   \n80994         NNW           24.0         NE        NNE  ...         63.0   \n80995         NNW           52.0         NE          N  ...         67.0   \n80996         SSW           24.0        WNW         SW  ...         61.0   \n80997         NNW           39.0          N          N  ...         69.0   \n\n       Pressure9am  Pressure3pm  Cloud9am  Cloud3pm  Temp9am  Temp3pm  \\\n64191       1005.1       1006.4       7.0       7.0     15.9     18.1   \n64192       1018.0       1019.3       6.0       7.0     12.5     15.8   \n64193       1020.8       1017.6       1.0       7.0     13.4     19.6   \n64194       1016.2       1012.8       5.0       4.0     16.0     28.2   \n64195       1011.9       1010.3       6.0       2.0     19.4     27.1   \n...            ...          ...       ...       ...      ...      ...   \n80992       1028.4       1025.0       1.0       7.0      5.2     13.8   \n80994       1028.5       1025.1       7.0       7.0      5.6     12.4   \n80995       1019.0       1014.0       1.0       7.0      8.8     11.6   \n80996       1018.7       1017.3       2.0       7.0      7.9     11.0   \n80997       1017.6       1015.3       7.0       7.0      9.0     11.7   \n\n       RainYesterday  RainToday  Season  \n64191             No        Yes  Summer  \n64192            Yes         No  Summer  \n64193             No         No  Summer  \n64194             No         No  Summer  \n64195             No         No  Summer  \n...              ...        ...     ...  \n80992             No         No  Winter  \n80994             No         No  Winter  \n80995             No        Yes  Winter  \n80996            Yes         No  Winter  \n80997             No         No  Winter  \n\n[7557 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Location</th>\n      <th>MinTemp</th>\n      <th>MaxTemp</th>\n      <th>Rainfall</th>\n      <th>Evaporation</th>\n      <th>Sunshine</th>\n      <th>WindGustDir</th>\n      <th>WindGustSpeed</th>\n      <th>WindDir9am</th>\n      <th>WindDir3pm</th>\n      <th>...</th>\n      <th>Humidity3pm</th>\n      <th>Pressure9am</th>\n      <th>Pressure3pm</th>\n      <th>Cloud9am</th>\n      <th>Cloud3pm</th>\n      <th>Temp9am</th>\n      <th>Temp3pm</th>\n      <th>RainYesterday</th>\n      <th>RainToday</th>\n      <th>Season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>64191</th>\n      <td>MelbourneAirport</td>\n      <td>11.2</td>\n      <td>19.9</td>\n      <td>0.0</td>\n      <td>5.6</td>\n      <td>8.8</td>\n      <td>SW</td>\n      <td>69.0</td>\n      <td>W</td>\n      <td>SW</td>\n      <td>...</td>\n      <td>37.0</td>\n      <td>1005.1</td>\n      <td>1006.4</td>\n      <td>7.0</td>\n      <td>7.0</td>\n      <td>15.9</td>\n      <td>18.1</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Summer</td>\n    </tr>\n    <tr>\n      <th>64192</th>\n      <td>MelbourneAirport</td>\n      <td>7.8</td>\n      <td>17.8</td>\n      <td>1.2</td>\n      <td>7.2</td>\n      <td>12.9</td>\n      <td>SSE</td>\n      <td>56.0</td>\n      <td>SW</td>\n      <td>SSE</td>\n      <td>...</td>\n      <td>43.0</td>\n      <td>1018.0</td>\n      <td>1019.3</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>12.5</td>\n      <td>15.8</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Summer</td>\n    </tr>\n    <tr>\n      <th>64193</th>\n      <td>MelbourneAirport</td>\n      <td>6.3</td>\n      <td>21.1</td>\n      <td>0.0</td>\n      <td>6.2</td>\n      <td>10.5</td>\n      <td>SSE</td>\n      <td>31.0</td>\n      <td>E</td>\n      <td>S</td>\n      <td>...</td>\n      <td>35.0</td>\n      <td>1020.8</td>\n      <td>1017.6</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>13.4</td>\n      <td>19.6</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Summer</td>\n    </tr>\n    <tr>\n      <th>64194</th>\n      <td>MelbourneAirport</td>\n      <td>8.1</td>\n      <td>29.2</td>\n      <td>0.0</td>\n      <td>6.4</td>\n      <td>12.5</td>\n      <td>SSE</td>\n      <td>35.0</td>\n      <td>NE</td>\n      <td>SSE</td>\n      <td>...</td>\n      <td>23.0</td>\n      <td>1016.2</td>\n      <td>1012.8</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>16.0</td>\n      <td>28.2</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Summer</td>\n    </tr>\n    <tr>\n      <th>64195</th>\n      <td>MelbourneAirport</td>\n      <td>9.7</td>\n      <td>29.0</td>\n      <td>0.0</td>\n      <td>7.4</td>\n      <td>12.3</td>\n      <td>SE</td>\n      <td>33.0</td>\n      <td>SW</td>\n      <td>SSE</td>\n      <td>...</td>\n      <td>31.0</td>\n      <td>1011.9</td>\n      <td>1010.3</td>\n      <td>6.0</td>\n      <td>2.0</td>\n      <td>19.4</td>\n      <td>27.1</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Summer</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>80992</th>\n      <td>Watsonia</td>\n      <td>3.6</td>\n      <td>14.5</td>\n      <td>0.0</td>\n      <td>2.4</td>\n      <td>8.8</td>\n      <td>NNE</td>\n      <td>41.0</td>\n      <td>ENE</td>\n      <td>NNE</td>\n      <td>...</td>\n      <td>66.0</td>\n      <td>1028.4</td>\n      <td>1025.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>5.2</td>\n      <td>13.8</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Winter</td>\n    </tr>\n    <tr>\n      <th>80994</th>\n      <td>Watsonia</td>\n      <td>4.8</td>\n      <td>13.3</td>\n      <td>0.4</td>\n      <td>0.6</td>\n      <td>0.0</td>\n      <td>NNW</td>\n      <td>24.0</td>\n      <td>NE</td>\n      <td>NNE</td>\n      <td>...</td>\n      <td>63.0</td>\n      <td>1028.5</td>\n      <td>1025.1</td>\n      <td>7.0</td>\n      <td>7.0</td>\n      <td>5.6</td>\n      <td>12.4</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Winter</td>\n    </tr>\n    <tr>\n      <th>80995</th>\n      <td>Watsonia</td>\n      <td>5.6</td>\n      <td>13.1</td>\n      <td>0.0</td>\n      <td>1.6</td>\n      <td>6.0</td>\n      <td>NNW</td>\n      <td>52.0</td>\n      <td>NE</td>\n      <td>N</td>\n      <td>...</td>\n      <td>67.0</td>\n      <td>1019.0</td>\n      <td>1014.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>8.8</td>\n      <td>11.6</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Winter</td>\n    </tr>\n    <tr>\n      <th>80996</th>\n      <td>Watsonia</td>\n      <td>6.9</td>\n      <td>12.1</td>\n      <td>3.2</td>\n      <td>1.8</td>\n      <td>5.6</td>\n      <td>SSW</td>\n      <td>24.0</td>\n      <td>WNW</td>\n      <td>SW</td>\n      <td>...</td>\n      <td>61.0</td>\n      <td>1018.7</td>\n      <td>1017.3</td>\n      <td>2.0</td>\n      <td>7.0</td>\n      <td>7.9</td>\n      <td>11.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Winter</td>\n    </tr>\n    <tr>\n      <th>80997</th>\n      <td>Watsonia</td>\n      <td>7.9</td>\n      <td>13.0</td>\n      <td>0.0</td>\n      <td>2.8</td>\n      <td>3.8</td>\n      <td>NNW</td>\n      <td>39.0</td>\n      <td>N</td>\n      <td>N</td>\n      <td>...</td>\n      <td>69.0</td>\n      <td>1017.6</td>\n      <td>1015.3</td>\n      <td>7.0</td>\n      <td>7.0</td>\n      <td>9.0</td>\n      <td>11.7</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Winter</td>\n    </tr>\n  </tbody>\n</table>\n<p>7557 rows Ã— 23 columns</p>\n</div>"},"metadata":{}}],"execution_count":108},{"cell_type":"code","source":"\nX = df.drop(columns='Rainfall', axis=1)\ny = df['Rainfall']\n\ny.value_counts()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:49.821076Z","iopub.execute_input":"2025-05-10T21:48:49.821455Z","iopub.status.idle":"2025-05-10T21:48:49.833450Z","shell.execute_reply.started":"2025-05-10T21:48:49.821428Z","shell.execute_reply":"2025-05-10T21:48:49.832476Z"}},"outputs":[{"execution_count":109,"output_type":"execute_result","data":{"text/plain":"Rainfall\n0.0     4452\n0.2      550\n0.4      258\n0.6      198\n0.8      157\n        ... \n33.6       1\n27.8       1\n18.4       1\n32.4       1\n13.0       1\nName: count, Length: 172, dtype: int64"},"metadata":{}}],"execution_count":109},{"cell_type":"markdown","source":"From the value counts, it shows that annual rainfall is relatively infrequent in the Melbourne area.\n\nUsing the naive model to calculate the accuracy of assumption that it will not rain every day, accuracy will be 100%.\n\nThis dataset shows an imbalance since the y.value_counts() show many more \"No Rain\" days than \"Rain\" days.","metadata":{}},{"cell_type":"markdown","source":"Split the data into training and test sests, ensuring target stratification","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\nvalid_classes = y.value_counts()[y.value_counts() >= 2].index\nX = X[y.isin(valid_classes)]\ny = y[y.isin(valid_classes)]\n\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, \n    test_size=0.2, \n    stratify=y, \n    random_state=42\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:54.223359Z","iopub.execute_input":"2025-05-10T21:48:54.223680Z","iopub.status.idle":"2025-05-10T21:48:54.242185Z","shell.execute_reply.started":"2025-05-10T21:48:54.223655Z","shell.execute_reply":"2025-05-10T21:48:54.241230Z"}},"outputs":[],"execution_count":110},{"cell_type":"markdown","source":"Automatically detecting numerical and categorical columns and assign them to separate numeric and categorical featuresÂ¶","metadata":{}},{"cell_type":"code","source":"numeric_features = X_train.select_dtypes(include=['number']).columns.tolist()  \ncategorical_features = X_train.select_dtypes(include=['object', 'category']).columns.tolist()\n\n\nnumeric_transformer = Pipeline(steps=[('scaler', StandardScaler())])\n\n\ncategorical_transformer = Pipeline(steps=[('onehot', OneHotEncoder(handle_unknown='ignore'))])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:56.725597Z","iopub.execute_input":"2025-05-10T21:48:56.725937Z","iopub.status.idle":"2025-05-10T21:48:56.733697Z","shell.execute_reply.started":"2025-05-10T21:48:56.725912Z","shell.execute_reply":"2025-05-10T21:48:56.732694Z"}},"outputs":[],"execution_count":111},{"cell_type":"markdown","source":"Combining the transformers into single preprocessing column transformer","metadata":{}},{"cell_type":"code","source":"from sklearn.compose import ColumnTransformer\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ]\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:48:58.457584Z","iopub.execute_input":"2025-05-10T21:48:58.457878Z","iopub.status.idle":"2025-05-10T21:48:58.462491Z","shell.execute_reply.started":"2025-05-10T21:48:58.457858Z","shell.execute_reply":"2025-05-10T21:48:58.461465Z"}},"outputs":[],"execution_count":112},{"cell_type":"markdown","source":"Random Forest Classifier Pipeline Creation","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\npipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('classifier', RandomForestClassifier(random_state=42))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:49:00.559978Z","iopub.execute_input":"2025-05-10T21:49:00.560319Z","iopub.status.idle":"2025-05-10T21:49:00.565079Z","shell.execute_reply.started":"2025-05-10T21:49:00.560294Z","shell.execute_reply":"2025-05-10T21:49:00.564142Z"}},"outputs":[],"execution_count":113},{"cell_type":"code","source":"param_grid = {\n    'classifier__n_estimators': [50, 100],\n    'classifier__max_depth': [None, 10, 20],\n    'classifier__min_samples_split': [2, 5]\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:49:01.770964Z","iopub.execute_input":"2025-05-10T21:49:01.771719Z","iopub.status.idle":"2025-05-10T21:49:01.775612Z","shell.execute_reply.started":"2025-05-10T21:49:01.771695Z","shell.execute_reply":"2025-05-10T21:49:01.774747Z"}},"outputs":[],"execution_count":114},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold\n\ncv = StratifiedKFold(n_splits=5, shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:49:03.590716Z","iopub.execute_input":"2025-05-10T21:49:03.591464Z","iopub.status.idle":"2025-05-10T21:49:03.595268Z","shell.execute_reply.started":"2025-05-10T21:49:03.591437Z","shell.execute_reply":"2025-05-10T21:49:03.594429Z"}},"outputs":[],"execution_count":115},{"cell_type":"markdown","source":"Instantiating and fitting Grid SearchCV to the pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, StratifiedKFold\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\ny_train = pd.cut(y_train, bins=3, labels=[0, 1, 2])\ngrid_search = GridSearchCV(\n    estimator=pipeline,\n    param_grid=param_grid,\n    cv=cv,\n    scoring='accuracy'\n)\n\ngrid_search.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:49:10.277587Z","iopub.execute_input":"2025-05-10T21:49:10.277913Z","iopub.status.idle":"2025-05-10T21:49:49.531749Z","shell.execute_reply.started":"2025-05-10T21:49:10.277891Z","shell.execute_reply":"2025-05-10T21:49:49.530761Z"}},"outputs":[{"execution_count":117,"output_type":"execute_result","data":{"text/plain":"GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('preprocessor',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         Pipeline(steps=[('scaler',\n                                                                                          StandardScaler())]),\n                                                                         ['MinTemp',\n                                                                          'MaxTemp',\n                                                                          'Evaporation',\n                                                                          'Sunshine',\n                                                                          'WindGustSpeed',\n                                                                          'WindSpeed9am',\n                                                                          'WindSpeed3pm',\n                                                                          'Humidity9am',\n                                                                          'Humidity3pm',\n                                                                          'Pressure9am',\n                                                                          'Pressure3pm',\n                                                                          'C...\n                                                                         Pipeline(steps=[('onehot',\n                                                                                          OneHotEncoder(handle_unknown='ignore'))]),\n                                                                         ['Location',\n                                                                          'WindGustDir',\n                                                                          'WindDir9am',\n                                                                          'WindDir3pm',\n                                                                          'RainYesterday',\n                                                                          'RainToday',\n                                                                          'Season'])])),\n                                       ('classifier',\n                                        RandomForestClassifier(random_state=42))]),\n             param_grid={'classifier__max_depth': [None, 10, 20],\n                         'classifier__min_samples_split': [2, 5],\n                         'classifier__n_estimators': [50, 100]},\n             scoring='accuracy')","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                                        ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                                         Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                                          StandardScaler())]),\n                                                                         [&#x27;MinTemp&#x27;,\n                                                                          &#x27;MaxTemp&#x27;,\n                                                                          &#x27;Evaporation&#x27;,\n                                                                          &#x27;Sunshine&#x27;,\n                                                                          &#x27;WindGustSpeed&#x27;,\n                                                                          &#x27;WindSpeed9am&#x27;,\n                                                                          &#x27;WindSpeed3pm&#x27;,\n                                                                          &#x27;Humidity9am&#x27;,\n                                                                          &#x27;Humidity3pm&#x27;,\n                                                                          &#x27;Pressure9am&#x27;,\n                                                                          &#x27;Pressure3pm&#x27;,\n                                                                          &#x27;C...\n                                                                         Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                                                          OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                                                         [&#x27;Location&#x27;,\n                                                                          &#x27;WindGustDir&#x27;,\n                                                                          &#x27;WindDir9am&#x27;,\n                                                                          &#x27;WindDir3pm&#x27;,\n                                                                          &#x27;RainYesterday&#x27;,\n                                                                          &#x27;RainToday&#x27;,\n                                                                          &#x27;Season&#x27;])])),\n                                       (&#x27;classifier&#x27;,\n                                        RandomForestClassifier(random_state=42))]),\n             param_grid={&#x27;classifier__max_depth&#x27;: [None, 10, 20],\n                         &#x27;classifier__min_samples_split&#x27;: [2, 5],\n                         &#x27;classifier__n_estimators&#x27;: [50, 100]},\n             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                                        ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                                         Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                                          StandardScaler())]),\n                                                                         [&#x27;MinTemp&#x27;,\n                                                                          &#x27;MaxTemp&#x27;,\n                                                                          &#x27;Evaporation&#x27;,\n                                                                          &#x27;Sunshine&#x27;,\n                                                                          &#x27;WindGustSpeed&#x27;,\n                                                                          &#x27;WindSpeed9am&#x27;,\n                                                                          &#x27;WindSpeed3pm&#x27;,\n                                                                          &#x27;Humidity9am&#x27;,\n                                                                          &#x27;Humidity3pm&#x27;,\n                                                                          &#x27;Pressure9am&#x27;,\n                                                                          &#x27;Pressure3pm&#x27;,\n                                                                          &#x27;C...\n                                                                         Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                                                          OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                                                         [&#x27;Location&#x27;,\n                                                                          &#x27;WindGustDir&#x27;,\n                                                                          &#x27;WindDir9am&#x27;,\n                                                                          &#x27;WindDir3pm&#x27;,\n                                                                          &#x27;RainYesterday&#x27;,\n                                                                          &#x27;RainToday&#x27;,\n                                                                          &#x27;Season&#x27;])])),\n                                       (&#x27;classifier&#x27;,\n                                        RandomForestClassifier(random_state=42))]),\n             param_grid={&#x27;classifier__max_depth&#x27;: [None, 10, 20],\n                         &#x27;classifier__min_samples_split&#x27;: [2, 5],\n                         &#x27;classifier__n_estimators&#x27;: [50, 100]},\n             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" ><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;MinTemp&#x27;, &#x27;MaxTemp&#x27;,\n                                                   &#x27;Evaporation&#x27;, &#x27;Sunshine&#x27;,\n                                                   &#x27;WindGustSpeed&#x27;,\n                                                   &#x27;WindSpeed9am&#x27;,\n                                                   &#x27;WindSpeed3pm&#x27;,\n                                                   &#x27;Humidity9am&#x27;, &#x27;Humidity3pm&#x27;,\n                                                   &#x27;Pressure9am&#x27;, &#x27;Pressure3pm&#x27;,\n                                                   &#x27;Cloud9am&#x27;, &#x27;Cloud3pm&#x27;,\n                                                   &#x27;Temp9am&#x27;, &#x27;Temp3pm&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                                  [&#x27;Location&#x27;, &#x27;WindGustDir&#x27;,\n                                                   &#x27;WindDir9am&#x27;, &#x27;WindDir3pm&#x27;,\n                                                   &#x27;RainYesterday&#x27;, &#x27;RainToday&#x27;,\n                                                   &#x27;Season&#x27;])])),\n                (&#x27;classifier&#x27;, RandomForestClassifier(random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" ><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;MinTemp&#x27;, &#x27;MaxTemp&#x27;, &#x27;Evaporation&#x27;,\n                                  &#x27;Sunshine&#x27;, &#x27;WindGustSpeed&#x27;, &#x27;WindSpeed9am&#x27;,\n                                  &#x27;WindSpeed3pm&#x27;, &#x27;Humidity9am&#x27;, &#x27;Humidity3pm&#x27;,\n                                  &#x27;Pressure9am&#x27;, &#x27;Pressure3pm&#x27;, &#x27;Cloud9am&#x27;,\n                                  &#x27;Cloud3pm&#x27;, &#x27;Temp9am&#x27;, &#x27;Temp3pm&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;Location&#x27;, &#x27;WindGustDir&#x27;, &#x27;WindDir9am&#x27;,\n                                  &#x27;WindDir3pm&#x27;, &#x27;RainYesterday&#x27;, &#x27;RainToday&#x27;,\n                                  &#x27;Season&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" ><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;MinTemp&#x27;, &#x27;MaxTemp&#x27;, &#x27;Evaporation&#x27;, &#x27;Sunshine&#x27;, &#x27;WindGustSpeed&#x27;, &#x27;WindSpeed9am&#x27;, &#x27;WindSpeed3pm&#x27;, &#x27;Humidity9am&#x27;, &#x27;Humidity3pm&#x27;, &#x27;Pressure9am&#x27;, &#x27;Pressure3pm&#x27;, &#x27;Cloud9am&#x27;, &#x27;Cloud3pm&#x27;, &#x27;Temp9am&#x27;, &#x27;Temp3pm&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Location&#x27;, &#x27;WindGustDir&#x27;, &#x27;WindDir9am&#x27;, &#x27;WindDir3pm&#x27;, &#x27;RainYesterday&#x27;, &#x27;RainToday&#x27;, &#x27;Season&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":117},{"cell_type":"code","source":"print(\"\\nBest parameters found: \", grid_search.best_params_)\nprint(\"Best cross-validation score: {:.2f}\".format(grid_search.best_score_))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:50:48.883755Z","iopub.execute_input":"2025-05-10T21:50:48.884152Z","iopub.status.idle":"2025-05-10T21:50:48.889913Z","shell.execute_reply.started":"2025-05-10T21:50:48.884128Z","shell.execute_reply":"2025-05-10T21:50:48.889009Z"}},"outputs":[{"name":"stdout","text":"\nBest parameters found:  {'classifier__max_depth': None, 'classifier__min_samples_split': 2, 'classifier__n_estimators': 50}\nBest cross-validation score: 0.98\n","output_type":"stream"}],"execution_count":118},{"cell_type":"code","source":"y_test = pd.cut(y_test, bins=3, labels=[0, 1, 2])\ntest_score = grid_search.score(X_test, y_test)  \nprint(\"Test set score: {:.2f}\".format(test_score))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:50:50.440131Z","iopub.execute_input":"2025-05-10T21:50:50.440436Z","iopub.status.idle":"2025-05-10T21:50:50.471203Z","shell.execute_reply.started":"2025-05-10T21:50:50.440414Z","shell.execute_reply":"2025-05-10T21:50:50.470101Z"}},"outputs":[{"name":"stdout","text":"Test set score: 0.95\n","output_type":"stream"}],"execution_count":119},{"cell_type":"markdown","source":"Getting Model predictions from the grid search estimator on the unseen data","metadata":{}},{"cell_type":"code","source":"y_pred = grid_search.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:50:52.031371Z","iopub.execute_input":"2025-05-10T21:50:52.032234Z","iopub.status.idle":"2025-05-10T21:50:52.060213Z","shell.execute_reply.started":"2025-05-10T21:50:52.032206Z","shell.execute_reply":"2025-05-10T21:50:52.059406Z"}},"outputs":[],"execution_count":120},{"cell_type":"markdown","source":"Classification Report","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:50:56.710635Z","iopub.execute_input":"2025-05-10T21:50:56.711035Z","iopub.status.idle":"2025-05-10T21:50:56.726580Z","shell.execute_reply.started":"2025-05-10T21:50:56.711008Z","shell.execute_reply":"2025-05-10T21:50:56.725591Z"}},"outputs":[{"name":"stdout","text":"\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.96      1.00      0.98      1433\n           1       0.00      0.00      0.00        53\n           2       0.00      0.00      0.00        15\n\n    accuracy                           0.95      1501\n   macro avg       0.32      0.33      0.33      1501\nweighted avg       0.91      0.95      0.93      1501\n\n","output_type":"stream"}],"execution_count":121},{"cell_type":"markdown","source":"Confusion Matrix","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt  \n\n\nconf_matrix = confusion_matrix(y_test, y_pred) \ndisp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix) \ndisp.plot(cmap='Blues')  \nplt.title('Confusion Matrix') \nplt.show()  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:51:52.756199Z","iopub.execute_input":"2025-05-10T21:51:52.756617Z","iopub.status.idle":"2025-05-10T21:51:52.947206Z","shell.execute_reply.started":"2025-05-10T21:51:52.756591Z","shell.execute_reply":"2025-05-10T21:51:52.946373Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":124},{"cell_type":"markdown","source":"The model correctly identified all actual class 0 sampels. In class 1 and class 2 , the model failed to identified any actual samples from these classes","metadata":{}},{"cell_type":"markdown","source":"Feature importance","metadata":{}},{"cell_type":"code","source":"feature_importances = grid_search.best_estimator_['classifier'].feature_importances_\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:51:56.810850Z","iopub.execute_input":"2025-05-10T21:51:56.811196Z","iopub.status.idle":"2025-05-10T21:51:56.819980Z","shell.execute_reply.started":"2025-05-10T21:51:56.811172Z","shell.execute_reply":"2025-05-10T21:51:56.819122Z"}},"outputs":[],"execution_count":125},{"cell_type":"markdown","source":"Another Model: Logistic Regression","metadata":{}},{"cell_type":"code","source":"# Combine numeric and categorical feature names\nfeature_names = numeric_features + list(grid_search.best_estimator_['preprocessor']\n                                        .named_transformers_['cat']\n                                        .named_steps['onehot']\n                                        .get_feature_names_out(categorical_features))\n\nfeature_importances = grid_search.best_estimator_['classifier'].feature_importances_\n\nimportance_df = pd.DataFrame({'Feature': feature_names,\n                              'Importance': feature_importances\n                             }).sort_values(by='Importance', ascending=False)\nN = 20  # Change this number to display more or fewer features\ntop_features = importance_df.head(N)\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.barh(top_features['Feature'], top_features['Importance'], color='skyblue')\nplt.gca().invert_yaxis()  # Invert y-axis to show the most important feature on top\nplt.title(f'Top {N} Most Important Features in predicting whether it will rain today')\nplt.xlabel('Importance Score')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:51:58.243851Z","iopub.execute_input":"2025-05-10T21:51:58.244276Z","iopub.status.idle":"2025-05-10T21:51:58.534893Z","shell.execute_reply.started":"2025-05-10T21:51:58.244178Z","shell.execute_reply":"2025-05-10T21:51:58.533966Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":126},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\n# Replace RandomForestClassifier with LogisticRegression\npipeline.set_params(classifier=LogisticRegression(random_state=42, max_iter=1000))\n\n# Update the model's estimator to use the new pipeline\ngrid_search.estimator = pipeline\n\n# Define a new grid with Logistic Regression parameters\nparam_grid = {\n    'classifier__solver': ['liblinear'],\n    'classifier__penalty': ['l1', 'l2'],\n    'classifier__class_weight': [None, 'balanced']\n}\n\ngrid_search.param_grid = param_grid\n\n# Fit the updated pipeline with LogisticRegression\ngrid_search.fit(X_train, y_train)\n\n# Make predictions\ny_pred = grid_search.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:52:05.201542Z","iopub.execute_input":"2025-05-10T21:52:05.201841Z","iopub.status.idle":"2025-05-10T21:52:13.239509Z","shell.execute_reply.started":"2025-05-10T21:52:05.201821Z","shell.execute_reply":"2025-05-10T21:52:13.238740Z"}},"outputs":[],"execution_count":127},{"cell_type":"markdown","source":"Compare the Result","metadata":{}},{"cell_type":"code","source":"print(classification_report(y_test, y_pred))\n\n# Generate the confusion matrix \nconf_matrix = confusion_matrix(y_test, y_pred)\n\nplt.figure()\nsns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d')\n\n# Set the title and labels\nplt.title('Rain Prediction Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\n\n# Show the plot\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:52:13.469555Z","iopub.execute_input":"2025-05-10T21:52:13.469860Z","iopub.status.idle":"2025-05-10T21:52:13.698110Z","shell.execute_reply.started":"2025-05-10T21:52:13.469840Z","shell.execute_reply":"2025-05-10T21:52:13.697107Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.95      1.00      0.98      1433\n           1       0.00      0.00      0.00        53\n           2       0.00      0.00      0.00        15\n\n    accuracy                           0.95      1501\n   macro avg       0.32      0.33      0.33      1501\nweighted avg       0.91      0.95      0.93      1501\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":129},{"cell_type":"markdown","source":"Both performs well only on the majority class and fails to recognise minority classes. Class imbalance! The majority classifier would always predict 0 no amtter the input. Acciracy is %80 but meaningless. It means model learned nothing. ","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n\n# Define a new pipeline with XGBoost\npipeline.set_params(classifier=XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', random_state=42))\n\n# Define hyperparameter grid\nparam_grid = {\n    'classifier__n_estimators': [50, 100],\n    'classifier__max_depth': [3, 6, 10],\n    'classifier__learning_rate': [0.01, 0.1],\n    'classifier__scale_pos_weight': [1, 3, 5]  # Optional tuning for class imbalance\n}\n\n# Update the GridSearchCV object\ngrid_search = GridSearchCV(\n    estimator=pipeline,\n    param_grid=param_grid,\n    cv=5,\n    scoring='accuracy',\n    n_jobs=-1,\n    verbose=1\n)\n\n# Fit the model\ngrid_search.fit(X_train, y_train)\n\n# Predict on test set\ny_pred = grid_search.predict(X_test)\n\n# Evaluate performance\nprint(\"Best parameters found:\", grid_search.best_params_)\nprint(\"Best CV accuracy: {:.2f}\".format(grid_search.best_score_))\nprint(\"Test set accuracy: {:.2f}\".format(grid_search.score(X_test, y_test)))\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix)\ndisp.plot(cmap='Blues')\nplt.title('XGBoost Confusion Matrix')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T21:52:16.706610Z","iopub.execute_input":"2025-05-10T21:52:16.706924Z","iopub.status.idle":"2025-05-10T21:52:53.320744Z","shell.execute_reply.started":"2025-05-10T21:52:16.706902Z","shell.execute_reply":"2025-05-10T21:52:53.319642Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 36 candidates, totalling 180 fits\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:19] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:20] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:21] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:22] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:24] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:24] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:24] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:24] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:24] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:25] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:25] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:25] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:25] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:26] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:26] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:26] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:26] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:26] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:27] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:28] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:28] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:28] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:28] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:28] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:29] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:29] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:29] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:29] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:30] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:30] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:31] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:31] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:31] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:31] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:32] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:33] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:34] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:34] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:34] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:34] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:35] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:35] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:36] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:37] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:38] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:39] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:40] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:41] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:42] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:42] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:42] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:42] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:44] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:44] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:44] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:44] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:44] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:45] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:45] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:45] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:45] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:45] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:46] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:46] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:46] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:46] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:48] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:48] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:48] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:49] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:49] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:49] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:50] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:50] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:50] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:51] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:51] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [21:52:51] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"scale_pos_weight\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"Best parameters found: {'classifier__learning_rate': 0.1, 'classifier__max_depth': 6, 'classifier__n_estimators': 100, 'classifier__scale_pos_weight': 1}\nBest CV accuracy: 0.98\nTest set accuracy: 0.95\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.96      1.00      0.98      1433\n           1       0.14      0.02      0.03        53\n           2       0.00      0.00      0.00        15\n\n    accuracy                           0.95      1501\n   macro avg       0.37      0.34      0.34      1501\nweighted avg       0.92      0.95      0.93      1501\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":130},{"cell_type":"markdown","source":"XGBoost did better than logistic regression or random forest in terms of handling some class 1 and 2 instances, but it still heavily favors class 0 due to class imbalance.","metadata":{}},{"cell_type":"markdown","source":"Rain Tomorrow as target parameter","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/weather-dataset-rattle-package/weatherAUS.csv')\ndf = df.drop(columns=['Date', 'Evaporation', 'Sunshine', 'Cloud9am', 'Cloud3pm'], errors='ignore')\n\n\ndf.dropna(subset=['RainTomorrow'], inplace=True)\n\n\nfor col in df.columns:\n    if df[col].dtype == 'object':\n        df[col].fillna(df[col].mode()[0], inplace=True)\n    else:\n        df[col].fillna(df[col].median(), inplace=True)\n\n\ndf['RainTomorrow'] = df['RainTomorrow'].map({'Yes': 1, 'No': 0})\nX = df.drop(columns='RainTomorrow')\ny = df['RainTomorrow']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n\nnumeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns.tolist()\ncategorical_features = X_train.select_dtypes(include=['object']).columns.tolist()\n\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\ncategorical_transformer = Pipeline(steps=[\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('num', numeric_transformer, numeric_features),\n    ('cat', categorical_transformer, categorical_features)\n])\n\n\nmodels = {\n    'Logistic Regression': LogisticRegression(class_weight='balanced', max_iter=1000, random_state=42),\n    'Random Forest': RandomForestClassifier(class_weight='balanced', n_estimators=100, random_state=42)\n}\n\n\nfor name, model in models.items():\n    print(f\"\\n=== {name} ===\")\n    pipeline = Pipeline(steps=[\n        ('preprocessor', preprocessor),\n        ('classifier', model)\n    ])\n    \n    pipeline.fit(X_train, y_train)\n    y_pred = pipeline.predict(X_test)\n\n   \n    print(classification_report(y_test, y_pred))\n\n    \n    conf_matrix = confusion_matrix(y_test, y_pred)\n    disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix)\n    disp.plot(cmap='Blues')\n    plt.title(f\"{name} - Confusion Matrix\")\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T22:05:29.925561Z","iopub.execute_input":"2025-05-10T22:05:29.925896Z","iopub.status.idle":"2025-05-10T22:09:56.502154Z","shell.execute_reply.started":"2025-05-10T22:05:29.925872Z","shell.execute_reply":"2025-05-10T22:09:56.501181Z"}},"outputs":[{"name":"stdout","text":"\n=== Logistic Regression ===\n              precision    recall  f1-score   support\n\n           0       0.92      0.79      0.85     22064\n           1       0.52      0.77      0.62      6375\n\n    accuracy                           0.79     28439\n   macro avg       0.72      0.78      0.74     28439\nweighted avg       0.83      0.79      0.80     28439\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n=== Random Forest ===\n              precision    recall  f1-score   support\n\n           0       0.86      0.96      0.91     22064\n           1       0.77      0.47      0.59      6375\n\n    accuracy                           0.85     28439\n   macro avg       0.82      0.72      0.75     28439\nweighted avg       0.84      0.85      0.84     28439\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":132}]}